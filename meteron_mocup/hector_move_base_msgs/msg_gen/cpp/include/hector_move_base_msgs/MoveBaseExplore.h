/* Auto-generated by genmsg_cpp for file /opt/hector/hydro/stacks/hector/hector_navigation/hector_move_base_msgs/msg/MoveBaseExplore.msg */
#ifndef HECTOR_MOVE_BASE_MSGS_MESSAGE_MOVEBASEEXPLORE_H
#define HECTOR_MOVE_BASE_MSGS_MESSAGE_MOVEBASEEXPLORE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace hector_move_base_msgs
{
template <class ContainerAllocator>
struct MoveBaseExplore_ {
  typedef MoveBaseExplore_<ContainerAllocator> Type;

  MoveBaseExplore_()
  : speed(0.0)
  {
  }

  MoveBaseExplore_(const ContainerAllocator& _alloc)
  : speed(0.0)
  {
  }

  typedef float _speed_type;
  float speed;


  typedef boost::shared_ptr< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveBaseExplore
typedef  ::hector_move_base_msgs::MoveBaseExplore_<std::allocator<void> > MoveBaseExplore;

typedef boost::shared_ptr< ::hector_move_base_msgs::MoveBaseExplore> MoveBaseExplorePtr;
typedef boost::shared_ptr< ::hector_move_base_msgs::MoveBaseExplore const> MoveBaseExploreConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hector_move_base_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca65bba734a79b4a6707341d829f4d5c";
  }

  static const char* value(const  ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xca65bba734a79b4aULL;
  static const uint64_t static_value2 = 0x6707341d829f4d5cULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hector_move_base_msgs/MoveBaseExplore";
  }

  static const char* value(const  ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 speed\n\
\n\
";
  }

  static const char* value(const  ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveBaseExplore_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hector_move_base_msgs::MoveBaseExplore_<ContainerAllocator> & v) 
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HECTOR_MOVE_BASE_MSGS_MESSAGE_MOVEBASEEXPLORE_H

